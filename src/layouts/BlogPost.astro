---
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import Header from '../components/Header.astro';

type Props = CollectionEntry<'blog'>['data'];

const { title, description, pubDate, updatedDate, heroImage } = Astro.props;
---

<html lang="en">
	<head>
		<BaseHead title={title} description={description} />
		<style>
			main {
				width: 100%;
				max-width: 100%;
				margin: 0;
				padding-top: 0;
			}
			.hero-image {
				width: 95vw;
				max-height: 500px;
				overflow: hidden;
				display: flex;
				align-items: center;
				justify-content: center;
				margin: 2.5vw auto 0 auto;
			}
			.hero-image img {
				display: block;
				margin: 0 auto;
				min-width: 100%;
				min-height: 500px;
				border-radius: 0;
				filter: brightness(1.9);
				opacity: 0.5;
				object-fit: cover;
			}
			.prose {
				font-size: 1.5rem;
				width: 100%;
				max-width: 26em;
				margin: 0 0 0 10vw;
				padding: 4rem 0;
				color: var(--black);
			}

			
			.title {
				position: absolute;
				margin: 0;
				padding: 1em 7.5vw;
				text-align: left;
				line-height: 1;
				width: 100%;
			}
			.title h1 {
				font-family: 'Alegreya', serif;
				font-style: italic;
				font-weight: 300;
				font-size: clamp(3rem, 0.75rem + 10vw, 7rem);
				text-align: left;
				line-height: 1;
				color: var(--black);
				margin: 0;
			}
			.date {
				margin-bottom: 0.5em;
				color: var(--grey);
				font-size: 2rem;
			}
			.last-updated-on {
				font-style: italic;
			}
			.crt-toggle-btn {
				position: absolute;
				top: 1rem;
				right: 1rem;
				z-index: 10;
				background: rgba(0, 0, 0, 0.7);
				color: white;
				border: 1px solid rgba(255, 255, 255, 0.3);
				padding: 0.5rem 1rem;
				font-size: 0.875rem;
				cursor: pointer;
				transition: all 0.2s ease;
			}
			.crt-toggle-btn:hover {
				background: rgba(0, 0, 0, 0.9);
				border-color: rgba(255, 255, 255, 0.6);
			}
			.crt-none {
				animation: none !important;
			}
			.crt-none::after {
				animation: none !important;
			}
		</style>
	</head>

	<body>
		<Header />
		<main>
			<article>
				<div class="hero-image crt" id="crt-container">
					<button id="crt-toggle" class="crt-toggle-btn" aria-label="Toggle CRT effect">MOTION OFF</button>
					{heroImage && <Image width={1020} height={510} src={heroImage} alt="" />}
					<div class="title">
						<div class="date">
							<FormattedDate date={pubDate} />
							{
								updatedDate && (
									<div class="last-updated-on">
										Last updated on <FormattedDate date={updatedDate} />
									</div>
								)
							}
						</div>
						<h1>{title}</h1>
					</div>
				</div>
				<div class="prose">	
					<slot />
				</div>
			</article>
		</main>
		<style is:global>
			@keyframes flicker {
			0% {
				opacity: 0.27861;
			}
			10% {
				opacity: 0.23604;
			}
			20% {
				opacity: 0.18128;
			}
			30% {
				opacity: 0.65583;
			}
			40% {
				opacity: 0.26559;
			}
			50% {
				opacity: 0.96019;
			}
			60% {
				opacity: 0.20313;
			}
			70% {
				opacity: 0.53455;
			}
			80% {
				opacity: 0.71428;
			}
			90% {
				opacity: 0.7003;
			}
			100% {
				opacity: 0.24387;
			}
			}
			@keyframes textShadow {
			0% {
				text-shadow: 0.4389924193300864px 0 1px rgba(0,30,255,0.5), -0.4389924193300864px 0 1px rgba(255,0,80,0.3), 0 0 3px;
			}
			5% {
				text-shadow: 2.7928974010788217px 0 1px rgba(0,30,255,0.5), -2.7928974010788217px 0 1px rgba(255,0,80,0.3), 0 0 3px;
			}
			10% {
				text-shadow: 0.02956275843481219px 0 1px rgba(0,30,255,0.5), -0.02956275843481219px 0 1px rgba(255,0,80,0.3), 0 0 3px;
			}
			15% {
				text-shadow: 0.40218538552878136px 0 1px rgba(0,30,255,0.5), -0.40218538552878136px 0 1px rgba(255,0,80,0.3), 0 0 3px;
			}
			20% {
				text-shadow: 3.4794037899852017px 0 1px rgba(0,30,255,0.5), -3.4794037899852017px 0 1px rgba(255,0,80,0.3), 0 0 3px;
			}
			25% {
				text-shadow: 1.6125630401149584px 0 1px rgba(0,30,255,0.5), -1.6125630401149584px 0 1px rgba(255,0,80,0.3), 0 0 3px;
			}
			30% {
				text-shadow: 0.7015590085143956px 0 1px rgba(0,30,255,0.5), -0.7015590085143956px 0 1px rgba(255,0,80,0.3), 0 0 3px;
			}
			35% {
				text-shadow: 3.896914047650351px 0 1px rgba(0,30,255,0.5), -3.896914047650351px 0 1px rgba(255,0,80,0.3), 0 0 3px;
			}
			40% {
				text-shadow: 3.870905614848819px 0 1px rgba(0,30,255,0.5), -3.870905614848819px 0 1px rgba(255,0,80,0.3), 0 0 3px;
			}
			45% {
				text-shadow: 2.231056963361899px 0 1px rgba(0,30,255,0.5), -2.231056963361899px 0 1px rgba(255,0,80,0.3), 0 0 3px;
			}
			50% {
				text-shadow: 0.08084290417898504px 0 1px rgba(0,30,255,0.5), -0.08084290417898504px 0 1px rgba(255,0,80,0.3), 0 0 3px;
			}
			55% {
				text-shadow: 2.3758461067427543px 0 1px rgba(0,30,255,0.5), -2.3758461067427543px 0 1px rgba(255,0,80,0.3), 0 0 3px;
			}
			60% {
				text-shadow: 2.202193051050636px 0 1px rgba(0,30,255,0.5), -2.202193051050636px 0 1px rgba(255,0,80,0.3), 0 0 3px;
			}
			65% {
				text-shadow: 2.8638780614874975px 0 1px rgba(0,30,255,0.5), -2.8638780614874975px 0 1px rgba(255,0,80,0.3), 0 0 3px;
			}
			70% {
				text-shadow: 0.48874025155497314px 0 1px rgba(0,30,255,0.5), -0.48874025155497314px 0 1px rgba(255,0,80,0.3), 0 0 3px;
			}
			75% {
				text-shadow: 1.8948491305757957px 0 1px rgba(0,30,255,0.5), -1.8948491305757957px 0 1px rgba(255,0,80,0.3), 0 0 3px;
			}
			80% {
				text-shadow: 0.0833037308038857px 0 1px rgba(0,30,255,0.5), -0.0833037308038857px 0 1px rgba(255,0,80,0.3), 0 0 3px;
			}
			85% {
				text-shadow: 0.09769827255241735px 0 1px rgba(0,30,255,0.5), -0.09769827255241735px 0 1px rgba(255,0,80,0.3), 0 0 3px;
			}
			90% {
				text-shadow: 3.443339761481782px 0 1px rgba(0,30,255,0.5), -3.443339761481782px 0 1px rgba(255,0,80,0.3), 0 0 3px;
			}
			95% {
				text-shadow: 2.1841838852799786px 0 1px rgba(0,30,255,0.5), -2.1841838852799786px 0 1px rgba(255,0,80,0.3), 0 0 3px;
			}
			100% {
				text-shadow: 2.6208764473832513px 0 1px rgba(0,30,255,0.5), -2.6208764473832513px 0 1px rgba(255,0,80,0.3), 0 0 3px;
			}
			}
			.crt::after {
			content: " ";
			display: block;
			position: absolute;
			top: 0;
			left: 0;
			bottom: 0;
			right: 0;
			background: rgba(18, 16, 16, 0.1);
			opacity: 0;
			z-index: 2;
			pointer-events: none;
			animation: flicker 0.15s infinite;
			}
			.crt::before {
			content: " ";
			display: block;
			position: absolute;
			top: 0;
			left: 0;
			bottom: 0;
			right: 0;
			background: linear-gradient(rgba(18, 16, 16, 0) 50%, rgba(0, 0, 0, 0.25) 50%), linear-gradient(90deg, rgba(255, 0, 0, 0.06), rgba(0, 255, 0, 0.02), rgba(0, 0, 255, 0.06));
			z-index: 2;
			background-size: 100% 2px, 3px 100%;
			pointer-events: none;
			}
			.crt {
			animation: textShadow 1.6s infinite;
			position: relative;
			box-shadow: inset 0 0 140px 0 rgba(0, 0, 0, 0.2);
			background-color: color-mix(in srgb, var(--grey) 20%, transparent);
			min-height: 500px;
			}
			.prose p:first-of-type:first-child:first-letter {
				font-family: 'Allegreya', serif;
				float: left;
				font-weight: 300;
				font-style: italic;
				font-size: clamp(4rem, 1rem + 17vw, 9rem);
				line-height: 60px;
				display: inline-block;
				padding-top: 1.5rem;
				padding-right: 0.75rem;
				padding-left: 3px;
				margin-bottom: 1rem;
			}
		</style>
		<script>
			document.addEventListener('DOMContentLoaded', function() {
				const toggleBtn = document.getElementById('crt-toggle');
				const crtContainer = document.getElementById('crt-container');
				
				if (toggleBtn && crtContainer) {
					toggleBtn.addEventListener('click', function() {
						crtContainer.classList.toggle('crt-none');
						toggleBtn.textContent = crtContainer.classList.contains('crt-none') ? 'MOTION ON' : 'MOTION OFF';
					});
				}
			});
		</script>
		<Footer />
	</body>
</html>
